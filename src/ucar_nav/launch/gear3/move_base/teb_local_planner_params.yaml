TebLocalPlannerROS:

 odom_topic: odom
 map_frame: /map
    
 # Trajectory
  
 teb_autosize: True
 dt_ref: 0.2  #局部路径规划的解析度。轨迹的所需时间分辨率（轨迹不固定为 dt_ref，因为时间分辨率是优化的一部分，但如果违反 +-dt_hysteresis dt_ref，轨迹将在迭代之间调整大小。
 dt_hysteresis: 0.02  #时域解析度的浮动程度。根据当前时间分辨率自动调整大小的滞后
 max_samples: 6
 global_plan_overwrite_orientation: True # 覆盖全局规划器提供的局部子目标的方向
 allow_init_with_backwards_motion: False
 max_global_plan_lookahead_dist: 1.0 ############ 7/26 0.8  # 全局计划子集的最大长度 # 过大路径不平滑，过小避障和转弯的效果不好，小车还容易不敢走 0.5 0.8
 global_plan_viapoint_sep: 0.06 # 如果为正，则从全局计划（路径跟随模式）扩展过孔点。该值确定参考路径的分辨率（沿全局计划的每个连续过孔点之间的最小间隔，如果为负：禁用）。
 global_plan_prune_distance: 1
 exact_arc_length: True ############ 7/26 False 精确计算路径上的弧长，会增加计算量
 feasibility_check_no_poses: 2  #检测位姿可到达的时间间隔 #before 1
 publish_feedback: False
    
 # Robot
         
 max_vel_x: 1.3  # 1.0 # 机器人的最大平移速度（以米/秒为单位）
 max_vel_x_backwards: 0.2 # 机器人向后行驶时的最大绝对平移速度（以米/秒为单位） 0.3
 max_vel_y: 0.2 # # 机器人的最大扫射速度（对于非完整机器人，应为零!）
 max_vel_theta: 2.4  # 机器人的最大角速度（弧度/秒） 4.0
 acc_lim_x: 1.3 ############ 7/26 1.5 # 机器人的最大平移加速度（以米/秒为单位）
 acc_lim_y: 0.9 # 机器人的最大扫射加速度
 acc_lim_theta: 1.3 # 机器人的最大角加速度（弧度/秒）1.0
 min_turning_radius: 0.0 # diff-drive robot (can turn on place!) # 最小转弯半径 0.15
 wheelbase : 0.0
# footprint_model:
#  type: "point"
 footprint_model:
   type: "polygon" # 指定用于优化的机器人足迹模型类型。不同的类型是“点”、“圆形”、“线”、“two_circles”和“多边形”。模型的类型会显著影响所需的计算时间
   vertices: [[0.171, -0.125], [0.171, 0.125],[-0.171, 0.125], [-0.171, -0.125]]
  #  vertices: [[0.171, -0.128], [0.171, 0.128],[-0.171, 0.128], [-0.171, -0.128]]
  # before [[0.171, -0.11], [0.171, 0.11],[-0.171, 0.11], [-0.171, -0.11]] # 此参数仅与类型“多边形”相关。它包含多边形顶点的列表（每个 2d 坐标）。多边形始终是闭合的：不要在末尾重复第一个顶点。
 
 # GoalTolerance
    
 xy_goal_tolerance: 0.22  # 允许到目标位置的最终欧氏距离（以米为单位）
 yaw_goal_tolerance: 0.18 # 同上，目标追踪误差
 free_goal_vel: False  # true  # 消除目标速度约束，使机器人能够以最大速度到达目标
 complete_global_plan: True
    
 # Obstacles
    
 min_obstacle_dist: 0.07 # This value must also include our robot radius, since footprint_model is set to "point".最小障碍物距离. # before 0.06 待定
 inflation_dist: 0.10  ############ 7/26 0.0 # 障碍物膨胀距离
 include_costmap_obstacles: True # 指定是否应考虑本地成本图的障碍。标记为障碍物的每个像元都被视为点障碍物。因此，不要选择非常小的成本图分辨率，因为它会增加计算时间。
 costmap_obstacles_behind_robot_dist: 1.5 # 限制在机器人后面规划时考虑的占用的本地成本图障碍（以米为单位指定距离）
 obstacle_poses_affected: 25 # 每个障碍物位置都附加到轨迹上最近的姿势，以保持距离

 dynamic_obstacle_inflation_dist: 0.1 # 与动态障碍物缓冲区
 include_dynamic_obstacles: True # 如果此参数设置为 true，则在优化期间通过恒定速度模型预测和考虑具有非零速度的障碍物（通过用户在主题 ~/障碍物上提供的障碍物提供或从costmap_converter获得）的运动

 costmap_converter_plugin: "costmap_converter::CostmapToLinesDBSRANSAC" # 定义插件名称以将成本图单元格转换为点/线/多边形
 costmap_converter_spin_thread: True # 如果设置为 true，成本图转换器将在其他线程中调用其回调队列
 costmap_converter_rate: 4 # 速率，用于定义 costmap_converter 插件处理当前成本图的频率,以Hz为单位

 # Optimization
    
 no_inner_iterations: 4 # 在每个外循环迭代中调用的实际求解器迭代次数
 no_outer_iterations: 3 # 每次外循环迭代都会根据所需的时间分辨率自动调整轨迹大小dt_ref并调用内部优化器
 optimization_activate: True
 optimization_verbose: False
 penalty_epsilon: 0.10 # 为硬约束近似的惩罚函数添加较小的安全裕度
 obstacle_cost_exponent: 4
 weight_max_vel_x: 15 # 满足最大允许平移速度的优化权重
 weight_max_vel_y: 60
 weight_max_vel_theta: 30.2 # 满足最大允许角速度的优化权重
 weight_acc_lim_x: 3.0 # 满足最大允许平移加速度的优化权重
 weight_acc_lim_y: 1
 weight_acc_lim_theta: 8.5 # 满足最大允许角加速度的优化权重
 weight_kinematics_nh: 50 # 满足非完整运动学的优化权重
 weight_kinematics_forward_drive: 999 # before 55.5 # 仅选择正向平移的权重
 weight_kinematics_turning_radius: 60.5 # 采用最小转向半径的权重
 weight_optimaltime: 5 # before 20 # must be > 0 # 根据执行时间对轨迹收缩的权重 20
 weight_shortest_path: 0.15
 weight_obstacle: 60 # 优化权重，用于与障碍物保持最小距离 70 before
 weight_inflation: 0.1 # 通货膨胀惩罚的优化权重（应该很小）
 weight_dynamic_obstacle: 10
 weight_dynamic_obstacle_inflation: 0.18
 weight_viapoint: 20 # 优化权重，用于最小化到过孔点的距离（或参考路径）
 weight_adapt_factor: 2 # 一些特殊权重（当前weight_obstacle）在每次外部TEB迭代中通过此因子重复缩放（weight_new = weight_old*因子）。迭代增加权重而不是先验地设置一个巨大的值会导致底层优化问题的更好数值条件

 # Homotopy Class Planner

 enable_homotopy_class_planning: False # 在独特的拓扑中激活并行规划（需要更多的 CPU 资源，因为一次优化了多个轨迹）False
 enable_multithreading: False ############ 7/26 True # 激活多个线程，以便在不同的线程中规划每个轨迹
 max_number_classes: 2 #最大不同轨迹数，指定考虑的不同轨迹的最大数量（限制计算工作量）
 selection_cost_hysteresis: 1.0 # 指定新候选项必须具有先前选择的轨迹的轨迹成本才能被选中（如果new_cost < old_cost*因子则选择）
 selection_prefer_initial_plan: 0.9
 selection_obst_cost_scale: 100.0 # 额外缩放障碍成本项，仅用于选择“最佳”候选人
 selection_alternative_time_cost: False # 如果为 true，则时间成本（时差平方和）将替换为总转换时间（时差总和）。
 
 roadmap_graph_no_samples: 15 # 指定为创建路线图图生成的样本数
 roadmap_graph_area_width: 5 # 随机关键点/航路点在起点和目标之间的矩形区域中采样。以米为单位指定该区域的宽度。
 roadmap_graph_area_length_scale: 1.0
 h_signature_prescaler: 0.8 # 用于区分同伦类的标度内部参数（H 签名） # before 0.5
 h_signature_threshold: 0.1 # 如果实部和复数件的差值都低于指定的阈值，则假定两个 H 签名相等
 obstacle_heading_threshold: 0.45 # 指定障碍物航向和目标航向之间的标量积值，以便在探索时将它们（障碍物）考虑在内
 switching_blocking_period: 0.0 # 指定在允许切换到新的等效类之前需要过期的持续时间（以秒为单位）
 viapoints_all_candidates: True # 如果为 true，则不同拓扑的所有轨迹都附加到过孔点集，否则只有与初始/全局计划共享相同拓扑的轨迹与它们连接（对test_optim_node没有影响）
 delete_detours_backwards: True
 max_ratio_detours_duration_best_duration: 3.0
 visualize_hc_graph: False # 可视化为探索独特轨迹而创建的图形（检查 rviz 中的标记消息）
 visualize_with_time_as_z_axis_scale: False

# Recovery
 
 shrink_horizon_backup: True # 允许计划人员在自动检测到问题（例如不可行性）的情况下暂时缩小范围（50%）
 shrink_horizon_min_duration: 10 # 指定缩小水平线的最短持续时间，以防检测到不可行的轨迹
 oscillation_recovery: True
 oscillation_v_eps: 0.1
 oscillation_omega_eps: 0.1
 oscillation_recovery_min_duration: 10
 oscillation_filter_duration: 10
 