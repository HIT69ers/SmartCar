# -*- coding: UTF-8 -*- 
#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *
#from local_planner_limits import add_generic_localplanner_params

gen = ParameterGenerator()

# This unusual line allows to reuse existing parameter definitions
# that concern all localplanners
# add_generic_localplanner_params(gen)

# For integers and doubles:
#       Name                    Type      Reconfiguration level
#       Description
#       Default  Min  Max

# Trajectory
grp_trajectory = gen.add_group("Trajectory", type="tab")

# teb_autosize:优化期间允许改变轨迹的时域长度
grp_trajectory.add("teb_autosize",   bool_t,   0, 
	"Enable the automatic resizing of the trajectory during optimization (based on the temporal resolution of the trajectory, recommended)",
	True)
# dt_ref:局部路径规划的解析度
grp_trajectory.add("dt_ref", double_t, 0, 
	"Temporal resolution of the planned trajectory (usually it is set to the magnitude of the 1/control_rate)",
	0.2, 0.01,  1)
# dt_hysteresis:允许改变的时域解析度的浮动范围，⼀般为dt_ref的10%左右
grp_trajectory.add("dt_hysteresis", double_t, 0, 
	"Hysteresis that is utilized for automatic resizing depending on the current temporal resolution (dt): usually 10% of dt_ref",
	0.02, 0.002,  0.5)
# global_plan_overwrite_orientation:覆盖全局路径中局部路径点的朝向
grp_trajectory.add("global_plan_overwrite_orientation",   bool_t,   0,
	"Some global planners are not considering the orientation at local subgoals between start and global goal, therefore determine it automatically",
	True)
# allow_init_with_backwards_motion:允许在开始时想后退来执⾏轨迹
grp_trajectory.add("allow_init_with_backwards_motion",   bool_t,   0,
	"If true, the underlying trajectories might be initialized with backwards motions in case the goal is behind the start within the local costmap (this is only recommended if the robot is equipped with rear sensors)",
	False)
# max_global_plan_lookahead_dist:考虑优化的全局计划⼦集的最⼤长度（累积欧⼏⾥得距离）（如果为0或负数：禁⽤；长度也受本地Costmap⼤⼩的限制）
grp_trajectory.add("max_global_plan_lookahead_dist",   double_t,   0,
  "Specify maximum length (cumulative Euclidean distances) of the subset of the global plan taken into account for optimization [if 0 or negative: disabled; the length is also bounded by the local costmap size]",
  0.6, 0, 50.0) 
# force_reinit_new_goal_dist:如果上⼀个⽬标的间隔超过指定的⽶数（跳过热启动），则强制规划器重新初始化轨迹
grp_trajectory.add("force_reinit_new_goal_dist",   double_t,   0,
	"Force the planner to reinitialize the trajectory if a previous goal is updated with a seperation of more than the specified value in meters (skip hot-starting)",
	0.1, 0.0, 10.0)
# force_reinit_new_goal_angular:
grp_trajectory.add("force_reinit_new_goal_angular",   double_t,   0,
	"Force the planner to reinitialize the trajectory if a previous goal is updated with a rotational difference of more than the specified value in radians (skip hot-starting)",
	0.78, 0.0, 4.0)	
# feasibility_check_no_poses:检测位姿可到达的时间间隔
grp_trajectory.add("feasibility_check_no_poses",   int_t,   0,
  "Specify up to which pose on the predicted plan the feasibility should be checked each sampling interval",
  2, 0, 50) 
# exact_arc_length:如果为真，规划器在速度、加速度和转弯率计算中使⽤精确的弧长[->增加的CPU时间]，否则使⽤欧⼏⾥德近似。
grp_trajectory.add("exact_arc_length",   bool_t,   0,
  "If true, the planner uses the exact arc length in velocity, acceleration and turning rate computations [-> increased cpu time], otherwise the euclidean approximation is used.",
  False)    
# publish_feedback:发布包含完整轨迹和活动障碍物列表的规划器反馈
grp_trajectory.add("publish_feedback",   bool_t,   0,
  "Publish planner feedback containing the full trajectory and a list of active obstacles (should be enabled only for evaluation or debugging purposes)",
  False)    
# visualize_with_time_as_z_axis_scale:如果该值⼤于0，则使⽤该值缩放的Z轴的时间在3D中可视化轨迹和障碍物。最适⽤于动态障碍。
grp_trajectory.add("visualize_with_time_as_z_axis_scale",    double_t,   0,
  "If this value is bigger than 0, the trajectory and obstacles are visualized in 3d using the time as the z-axis scaled by this value. Most useful for dynamic obstacles.",
  0, 0, 1)
        
# ViaPoints
grp_viapoints = gen.add_group("ViaPoints", type="tab")

# global_plan_viapoint_sep:ucar_ws全局计划中提取的每两个连续通过点之间的最⼩间隔[如果为负：禁⽤]
grp_viapoints.add("global_plan_viapoint_sep",   double_t,   0,
  "Min. separation between each two consecutive via-points extracted from the global plan [if negative: disabled]",
  0.06, -0.1, 5.0) 
# via_points_ordered:如果为真，规划器遵循存储容器中通过点的顺序
grp_viapoints.add("via_points_ordered",   bool_t,   0,
  "If true, the planner adheres to the order of via-points in the storage container",
  False)     

# Robot
grp_robot = gen.add_group("Robot", type="tab")

# max_vel_x:最大x前向速度
grp_robot.add("max_vel_x", double_t, 0, 
	"Maximum translational velocity of the robot",
	0.8, 0, 100)   
# max_vel_x_backwards:最大x后退速度
grp_robot.add("max_vel_x_backwards", double_t, 0, 
	"Maximum translational velocity of the robot for driving backwards",
	0.5, 0.01, 100)   
# max_vel_theta:最大转向角速度
grp_robot.add("max_vel_theta", double_t, 0,
	"Maximum angular velocity of the robot", 
	0.8, 0.01, 100) 
# acc_lim_x:最大x加速度
grp_robot.add("acc_lim_x", double_t, 0, 
	"Maximum translational acceleration of the robot",
	0.4, 0.01, 100)   
# acc_lim_theta:最大角加速度
grp_robot.add("acc_lim_theta", double_t, 0,
	"Maximum angular acceleration of the robot", 
	0.8, 0.01, 100)  
# is_footprint_dynamic:footprint是否为动态
grp_robot.add("is_footprint_dynamic",   bool_t,   0,
  "If true, updated the footprint before checking trajectory feasibility",
  True)

# Robot/Carlike
grp_robot_carlike = grp_robot.add_group("Carlike", type="hide")

# min_turning_radius:最小转弯半径
grp_robot_carlike.add("min_turning_radius", double_t, 0,
  "Minimum turning radius of a carlike robot (diff-drive robot: zero)", 
  0.02, 0.0, 50.0)   
# wheelbase:驱动轴和转向轴之间的距离(仅适⽤于启⽤了“Cmd_angle_⽽不是_rotvel”的Carlike机器⼈)；对于后轮式机器⼈，该值可能为负值！
grp_robot_carlike.add("wheelbase", double_t, 0,
  "The distance between the drive shaft and steering axle (only required for a carlike robot with 'cmd_angle_instead_rotvel' enabled); The value might be negative for back-wheeled robots!", 
  1.0, -10.0, 10.0)  
# cmd_angle_instead_rotvel:将收到的⾓速度消息转换为操作上的⾓度变化
grp_robot_carlike.add("cmd_angle_instead_rotvel",   bool_t,   0, 
  "Substitute the rotational velocity in the commanded velocity message by the corresponding steering angle (check 'axles_distance')", 
  False)  

# Robot/Omni
grp_robot_omni = grp_robot.add_group("Omnidirectional", type="hide")

# max_vel_y:最大y方向速度
grp_robot_omni.add("max_vel_y", double_t, 0, 
  "Maximum strafing velocity of the robot (should be zero for non-holonomic robots!)",
  0.75, 0.0, 100) 
# acc_lim_y:最大y方向加速度
grp_robot_omni.add("acc_lim_y", double_t, 0, 
  "Maximum strafing acceleration of the robot",
  0.2, 0.01, 100) 

# GoalTolerance
grp_goal = gen.add_group("GoalTolerance", type="tab")

# xy_goal_tolerance:目标xy偏移容忍度
grp_goal.add("xy_goal_tolerance", double_t, 0,
	"Allowed final euclidean distance to the goal position",
	0.15, 0.001, 10) 
# yaw_goal_tolerance:目标角度偏移容忍度
grp_goal.add("yaw_goal_tolerance", double_t, 0, 
	"Allowed final orientation error to the goal orientation", 
	0.5, 0.001, 3.2)
# free_goal_vel:允许最大驶向目的地速度
grp_goal.add("free_goal_vel",   bool_t,   0, 
	"Allow the robot's velocity to be nonzero for planning purposes (the robot can arrive at the goal with max speed)", 
	False)
    
# Obstacles
grp_obstacles = gen.add_group("Obstacles", type="tab")

# min_obstacle_dist:和障碍物最小距离
grp_obstacles.add("min_obstacle_dist", double_t, 0, 
	"Minimum desired separation from obstacles", 
	0.11, 0, 10)     
# inflation_dist:障碍物膨胀距离
grp_obstacles.add("inflation_dist", double_t, 0,
        "Buffer zone around obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect)",
        0.09, 0, 15)
# dynamic_obstacle_inflation_dist:动态障碍物膨胀范围
grp_obstacles.add("dynamic_obstacle_inflation_dist", double_t, 0,
        "Buffer zone around predicted locations of dynamic obstacles with non-zero penalty costs (should be larger than min_obstacle_dist in order to take effect)",
        0.09, 0, 15)
# include_dynamic_obstacles:是否将动态障碍物预测为速度模型
grp_obstacles.add("include_dynamic_obstacles", bool_t, 0,
        "Specify whether the movement of dynamic obstacles should be predicted by a constant velocity model (this also changes the homotopy class search). If false, all obstacles are considered to be static.",
        True)
# include_costmap_obstacles:代价地图中的障碍物是否被直接考虑
grp_obstacles.add("include_costmap_obstacles",   bool_t,   0, 
	"Specify whether the obstacles in the costmap should be taken into account directly (this is necessary if no seperate clustering and detection is implemented)", 
	True)
# legacy_obstacle_association:是否严格遵循局部规划中的路径
grp_obstacles.add("legacy_obstacle_association",  bool_t,   0, 
	"If true, the old association strategy is used (for each obstacle, find the nearest TEB pose), otherwise the new one (for each teb pose, find only 'relevant' obstacles).", 
	False)
# obstacle_association_force_inclusion_factor:非传统障碍物关联技术尝试在优化过程中仅将相关障碍物与离散化轨迹连接，强制包括指定距离内的所有障碍物（作为最小障碍物距离的倍数），例如，选择2.0以考虑半径为2.0*最小障碍物距离内的障碍物
grp_obstacles.add("obstacle_association_force_inclusion_factor",   double_t,   0,
  "The non-legacy obstacle association technique tries to connect only relevant obstacles with the discretized trajectory during optimization, all obstacles within a specifed distance are forced to be included (as a multiple of min_obstacle_dist), e.g. choose 2.0 in order to consider obstacles within a radius of 2.0*min_obstacle_dist.", 
  1.5, 0.0, 100.0) 
# obstacle_association_cutoff_factor:
grp_obstacles.add("obstacle_association_cutoff_factor",   double_t,   0,
  "See obstacle_association_force_inclusion_factor, but beyond a multiple of [value]*min_obstacle_dist all obstacles are ignored during optimization. obstacle_association_force_inclusion_factor is processed first.", 
  5.0, 1.0, 100.0)   
# costmap_obstacles_behind_robot_dist:限制机器人后面规划时考虑的占用的局部成本地图障碍物（以米为单位指定距离）
grp_obstacles.add("costmap_obstacles_behind_robot_dist",   double_t,   0,
  "Limit the occupied local costmap obstacles taken into account for planning behind the robot (specify distance in meters)", 
  1.0, 0.0, 20.0)  
# obstacle_poses_affected:障碍物位置附加到轨迹上最近的姿势，以减少计算工作量，但也要考虑许多邻居
grp_obstacles.add("obstacle_poses_affected",    int_t,    0, 
	"The obstacle position is attached to the closest pose on the trajectory to reduce computational effort, but take a number of neighbors into account as well", 
	30, 0, 200)
	
# Optimization
grp_optimization = gen.add_group("Optimization", type="tab")    

# no_inner_iterations:被外循环调⽤后内循环执⾏优化次数
grp_optimization.add("no_inner_iterations",    int_t,    0,
	"Number of solver iterations called in each outerloop iteration", 
	5, 1, 100)
# no_outer_iterations:执⾏的外循环的优化次数
grp_optimization.add("no_outer_iterations",    int_t,    0, 
	"Each outerloop iteration automatically resizes the trajectory and invokes the internal optimizer with no_inner_iterations", 
	4, 1, 100)
# optimization_activate:激活优化
grp_optimization.add("optimization_activate",   bool_t,   0,
	"Activate the optimization",
	True)
# optimization_verbose:打印优化过程详情
grp_optimization.add("optimization_verbose",   bool_t,   0, 
	"Print verbose information", 
	False)
# penalty_epsilon:对于硬约束近似，在惩罚函数中添加安全范围
grp_optimization.add("penalty_epsilon", double_t, 0, 
	"Add a small safty margin to penalty functions for hard-constraint approximations",
	0.1, 0, 1.0) 
# weight_max_vel_x:最大x速度权重
grp_optimization.add("weight_max_vel_x", double_t, 0, 
	"Optimization weight for satisfying the maximum allowed translational velocity", 
	1.05, 0, 1000) 
# weight_max_vel_y:最大y速度权重
grp_optimization.add("weight_max_vel_y", double_t, 0, 
	"Optimization weight for satisfying the maximum allowed strafing velocity (in use only for holonomic robots)", 
	1.5, 0, 1000) 
# weight_max_vel_theta:最大角速度权重
grp_optimization.add("weight_max_vel_theta", double_t, 0, 
	"Optimization weight for satisfying the maximum allowed angular velocity", 
	5.5, 0, 1000) 
# weight_acc_lim_x:最大x加速度权重
grp_optimization.add("weight_acc_lim_x", double_t, 0, 
	"Optimization weight for satisfying the maximum allowed translational acceleration", 
	2, 0, 1000)
# weight_acc_lim_y:最大y加速度权重
grp_optimization.add("weight_acc_lim_y", double_t, 0, 
	"Optimization weight for satisfying the maximum allowed strafing acceleration (in use only for holonomic robots)", 
	1.5, 0, 1000)
# weight_acc_lim_theta:最大角加速度权重
grp_optimization.add("weight_acc_lim_theta", double_t, 0, 
	"Optimization weight for satisfying the maximum allowed angular acceleration",
	4, 0, 1000) 
# weight_kinematics_nh:满足非完整运动学的优化权
grp_optimization.add("weight_kinematics_nh", double_t, 0,
	"Optimization weight for satisfying the non-holonomic kinematics", 
	1000 , 0, 10000) 
# weight_kinematics_forward_drive:优化过程中，迫使机器⼈只选择前进⽅向，差速轮适⽤
grp_optimization.add("weight_kinematics_forward_drive", double_t, 0, 
	"Optimization weight for forcing the robot to choose only forward directions (positive transl. velocities, only diffdrive robot)", 
	900, 0, 1000) 
# weight_kinematics_turning_radius:优化过程中，最小转弯半径权重
grp_optimization.add("weight_kinematics_turning_radius", double_t, 0, 
  "Optimization weight for enforcing a minimum turning radius (carlike robots)", 
  50, 0, 1000) 
# weight_optimaltime:优化过程中，基于轨迹的时间上的权重
grp_optimization.add("weight_optimaltime", double_t, 0, 
        "Optimization weight for contracting the trajectory w.r.t. transition time",
	100, 0, 1000) 
# weight_shortest_path:收缩轨迹w.r.t.路径长度的优化权重
grp_optimization.add("weight_shortest_path", double_t, 0,
        "Optimization weight for contracting the trajectory w.r.t. path length",
        0, 0, 100)
# weight_obstacle:优化过程中，和障碍物最⼩距离的权重
grp_optimization.add("weight_obstacle", double_t, 0, 
	"Optimization weight for satisfying a minimum seperation from obstacles",
	90, 0, 1000) 
# weight_inflation:优化过程中， 膨胀区的权重
grp_optimization.add("weight_inflation", double_t, 0, 
        "Optimization weight for the inflation penalty (should be small)",
        0.08, 0, 10) 
# weight_dynamic_obstacle:优化过程中，和动态障碍物最⼩距离的权重
grp_optimization.add("weight_dynamic_obstacle", double_t, 0, 
	"Optimization weight for satisfying a minimum seperation from dynamic obstacles", 
	50, 0, 1000) 
# weight_dynamic_obstacle_inflation:优化过程中，和动态障碍物膨胀区的权重
grp_optimization.add("weight_dynamic_obstacle_inflation", double_t, 0,
        "Optimization weight for the inflation penalty of dynamic obstacles (should be small)",
        0.1, 0, 10)
# weight_viapoint:优化过程中，和全局路径采样点距离的权重
grp_optimization.add("weight_viapoint", double_t, 0, 
  "Optimization weight for minimizing the distance to via-points", 
  20, 0, 1000) 
# weight_adapt_factor:在每个外部TEB迭代中，一些特殊权重（当前为“权重障碍”）通过该因子重复缩放（权重\u新：权重\u旧*因子）；迭代地增加权重，而不是先验地设置一个巨大的值，可以为基础优化问题提供更好的数值条件
grp_optimization.add("weight_adapt_factor", double_t, 0, 
  "Some special weights (currently 'weight_obstacle') are repeatedly scaled by this factor in each outer TEB iteration (weight_new: weight_old * factor); Increasing weights iteratively instead of setting a huge value a-priori leads to better numerical conditions of the underlying optimization problem.", 
  2, 1, 100) 
# obstacle_cost_exponent:非线性障碍成本指数（成本=线性成本*障碍成本指数）。设置为1以禁用非线性成本（默认）
grp_optimization.add("obstacle_cost_exponent", double_t, 0,
	"Exponent for nonlinear obstacle cost (cost = linear_cost * obstacle_cost_exponent). Set to 1 to disable nonlinear cost (default)",
	1, 0.01, 100)

# Homotopy Class Planner
grp_hcp = gen.add_group("HCPlanning", type="tab")    
    
# enable_multithreading:允许多线程并⾏处理
grp_hcp.add("enable_multithreading",    bool_t,    0,
	"Activate multiple threading for planning multiple trajectories in parallel", 
	False)
# max_number_classes:允许的线程数
grp_hcp.add("max_number_classes",    int_t,    0,
	"Specify the maximum number of allowed alternative homotopy classes (limits computational effort)", 
	1, 0, 100)
# selection_cost_hysteresis:指定一个新的候选轨迹必须有多少轨迹成本才能被选择（如果new\u cost<old\u cost*factor，则选择）
grp_hcp.add("selection_cost_hysteresis", double_t, 0, 
  "Specify how much trajectory cost must a new candidate have w.r.t. a previously selected trajectory in order to be selected (selection if new_cost < old_cost*factor)", 
  1.0, 0, 2) 
# selection_prefer_initial_plan:为初始计划的等效类中的轨迹指定间隔（0,1）内的成本降低
grp_hcp.add("selection_prefer_initial_plan", double_t, 0, 
  "Specify a cost reduction in the interval (0,1) for the trajectory in the equivalence class of the initial plan.)", 
  0.95, 0, 1) 
# selection_obst_cost_scale:仅为选择“最佳”候选人而额外扩展障碍成本条款（新的obst\U成本：obst\U成本*系数）
grp_hcp.add("selection_obst_cost_scale", double_t, 0, 
  "Extra scaling of obstacle cost terms just for selecting the 'best' candidate (new_obst_cost: obst_cost*factor)", 
  90, 0, 1000) 
# selection_viapoint_cost_scale:仅为了选择“最佳”候选人，via point成本术语的额外扩展。（new\u viapt\u成本：viapt\u成本*系数）
grp_hcp.add("selection_viapoint_cost_scale", double_t, 0, 
  "Extra scaling of via-point cost terms just for selecting the 'best' candidate. (new_viapt_cost: viapt_cost*factor)", 
  1.0, 0, 100) 
# selection_alternative_time_cost:如果为true，则时间成本将替换为总过渡时间
grp_hcp.add("selection_alternative_time_cost",   bool_t,   0, 
  "If true, time cost is replaced by the total transition time.", 
  False)
# switching_blocking_period:指定允许切换到新等价类之前需要过期的持续时间（以秒为单位）
grp_hcp.add("switching_blocking_period",   double_t,   0,
  "Specify a time duration in seconds that needs to be expired before a switch to new equivalence class is allowed",
  0.0, 0.0, 60)
# roadmap_graph_no_samples:如果已关闭simple\u exploration，请指定为创建路线图而生成的样本数
grp_hcp.add("roadmap_graph_no_samples",    int_t,    0,
	"Specify the number of samples generated for creating the roadmap graph, if simple_exploration is turend off", 
	10, 1, 100)
# roadmap_graph_area_width:指定将在起始和目标之间生成采样的区域的宽度[m]（高度等于起始目标距离）
grp_hcp.add("roadmap_graph_area_width", double_t, 0, 
	"Specify the width of the area in which sampled will be generated between start and goal [m] (the height equals the start-goal distance)", 
	5, 0.1, 20) 
# roadmap_graph_area_length_ation({"global_plan_viapoint_sep": 1.0})scale:矩形区域的长度由起点和终点之间的距离决定。此参数进一步缩放距离，使几何中心保持相等！）
grp_hcp.add("roadmap_graph_area_length_scale", double_t, 0, 
        "The length of the rectangular region is determined by the distance between start and goal. This parameter further scales the distance such that the geometric center remains equal!)", 
        1.0, 0.5, 2) 
# h_signature_prescaler:缩放障碍物数量值，以允许存在大量障碍物。不要选择极低的位置，否则无法区分障碍物（0.2<H<=1）
grp_hcp.add("h_signature_prescaler", double_t, 0, 
	"Scale number of obstacle value in order to allow huge number teb of obstacles. Do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2<H<=1)", 
	0.5, 0.2, 1) 
# h_signature_threshold:如果实部和复杂部的差值均低于规定阈值，则假设两个h签名者相等
grp_hcp.add("h_signature_threshold", double_t, 0, 
	"Two h-signuteres are assumed to be equal, if both the difference of real parts and complex parts are below the specified threshold", 
	0.1, 0, 1) 
# obstacle_heading_threshold:指定障碍物标题和目标标题之间的标准化标量积的值，以便将它们（障碍物）考虑在内进行探索）
grp_hcp.add("obstacle_heading_threshold", double_t, 0, 
	"Specify the value of the normalized scalar product between obstacle heading and goal heading in order to take them (obstacles) into account for exploration)", 
	0.45, 0, 1) 
# viapoints_all_candidates:如果为true，则将不同拓扑的所有轨迹附加到过孔点集，否则仅附加与初始/全局计划共享同一个的轨迹（在test\u optim\u节点中无效）
grp_hcp.add("viapoints_all_candidates",    bool_t,    0,
  "If true, all trajectories of different topologies are attached to the set of via-points, otherwise only the trajectory sharing the same one as the initial/global plan is attached (no effect in test_optim_node).", 
  True)
# visualize_hc_graph:可视化为探索新同伦类而创建的图
grp_hcp.add("visualize_hc_graph",    bool_t,    0,
	"Visualize the graph that is created for exploring new homotopy classes", 
	False)

# Recovery
grp_recovery = gen.add_group("Recovery", type="tab")   

# shrink_horizon_backup:允许计划员在自动检测到问题的情况下临时缩小范围（50%）
grp_recovery.add("shrink_horizon_backup",   bool_t,  0,
  "Allows the planner to shrink the horizon temporary (50%) in case of automatically detected issues.",
  True) 
# oscillation_recovery:尝试检测并解决同一等价类中多个解决方案之间的振荡（机器人经常在左/右/前/后之间切换）
grp_recovery.add("oscillation_recovery",   bool_t,   0,
  "Try to detect and resolve oscillations between multiple solutions in the same equivalence class (robot frequently switches between left/right/forward/backwards).",
  True) 
  
exit(gen.generate("dynamic_reconfigure_test", "teb_planner", "TebLocalPlannerReconfigure"))

# 重要参数：
# max_global_plan_lookahead_dist    考虑优化的全局计划⼦集的最⼤长度（累积欧⼏⾥得距离）
# min_obstacle_dist                 避障距离(障碍物膨胀半径)
# dt_ref                            轨迹的时间分辨率, TEB 时间最优策略, 分辨率越⾼更好逼近真实
